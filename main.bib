@preamble{ "\newcommand{\noopsort}[1]{} "
	# "\newcommand{\printfirst}[2]{#1} "
	# "\newcommand{\singleletter}[1]{#1} "
	# "\newcommand{\switchargs}[2]{#2#1} " }




@book{talbi2009metaheuristics,
  title={Metaheuristics: from design to implementation},
  author={Talbi, El-Ghazali},
  volume={74},
  year={2009},
  publisher={John Wiley \& Sons}
}

@article{Smith2002,
author = {Smith, C.U. and Williams, L.G.},
file = {:Users/naubergois/Downloads/24fe255149e4fc0d7e1e8924c243a85dd676.pdf:pdf},
journal = {Cmg-Conference-},
pages = {797--806},
title = {{Software Performance AntiPatterns; Common Performance Problems and their Solutions}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.6968{\&}rep=rep1{\&}type=pdf},
volume = {2},
year = {2002}
}

@article{Brown2003,
author = {Brown, Matthew a and Tapolcsanyi, Eli},
file = {:Users/naubergois/Downloads/Brown-mock-objects.pdf:pdf},
journal = {Matrix},
pages = {1--17},
title = {{Mock Object Patterns}},
year = {2003}
}


@article{Hunt2002,
author = {Hunt, Editors Andy and Thomas, Dave and Pragmatic, I The and Hunt, Andy and Mackinnon, Tim and Freeman, Steve},
doi = {10.1109/MS.2004.1259177},
file = {:Users/naubergois/Downloads/may{\_}02{\_}mock.pdf:pdf},
issn = {0740-7459},
journal = {Ieee Software},
number = {June},
pages = {22--24},
title = {{Software Construction}},
year = {2002}
}

@article{Bertolino2008,
isbn = {978-3-540-68514-2, 978-3-540-68524-1},
issn = {978-3-540-68514-2},
journal = {Testing of Software and {\ldots}},
pages = {266--282},
title = {{Model-based generation of testbeds for web services}},
year = {2008}
}

@book{GendreauMichelandPotvin2010,
author = {{Gendreau, Michel and Potvin}, Jean-Yves},
doi = {10.1007/978-1-4614-1900-6},
file = {:Users/naubergois/Downloads/Artificial{\_}Immune{\_}Systems.pdf:pdf},
isbn = {9781441979605},
title = {{Handbook of Metaheuristics}},
volume = {157},
year = {2010}
}




@article{Mackinnon2001,
abstract = {Unit testing is a fundamental practice in Extreme Programming, but most non-trivial code is difficult to test in isolation. It is hard to avoid writing test suites that are complex, incomplete, and difficult to maintain and interpret. Using Mock Objects for unit testing improves both domain code and test suites. They allow unit tests to be written for everything, simplify test structure, and avoid polluting domain code with testing infrastructure.},
author = {Mackinnon, Tim and Freeman, Steve and Craig, Philip},
file = {:Users/naubergois/Downloads/mockobjects.pdf:pdf},
isbn = {0201710404},
journal = {Extreme programming examined},
keywords = {extreme programming,mock objects,stubs,unit testing},
pages = {287--301},
title = {{Endo-Testing : Unit Testing with Mock Objects}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.23.3214{\&}rep=rep1{\&}type=pdf},
year = {2001}
}



@article{Wert2013a,
abstract = {Performance problems pose a significant risk to software vendors. If left undetected, they can lead to lost customers, increased operational costs, and damaged reputation. Despite all efforts, software engineers cannot fully prevent performance problems being introduced into an application. Detecting and resolving such problems as early as possible with minimal effort is still an open challenge in software performance engineering. In this paper, we present a novel approach for Performance Problem Diagnostics (PPD) that systematically searches for well-known performance problems (also called performance antipatterns) within an application. PPD automatically isolates the problem's root cause, hence facilitating problem solving. We applied PPD to a well established transactional web e-Commerce benchmark (TPC-W) in two deployment scenarios. PPD automatically identified four performance problems in the benchmark implementation and its deployment environment. By fixing the problems, we increased the maximum throughput of the benchmark from 1800 requests per second to more than 3500.},
author = {Wert, Alexander and Happe, Jens and Happe, Lucia},
doi = {10.1109/ICSE.2013.6606601},
file = {:Users/naubergois/Downloads/ICSE-2013-PerformanceProblemDiagnostics.pdf:pdf},
isbn = {9781467330763},
issn = {02705257},
journal = {Proceedings - International Conference on Software Engineering},
keywords = {measurement,performance,problem detection},
number = {May},
pages = {552--561},
title = {{Supporting swift reaction: Automatically uncovering performance problems by systematic experiments}},
year = {2013}
}

@article{Smith2003,
abstract = {Performance antipatterns document common software performance problems as well as their solutions. These problems are often introduced during the architectural or design phases of software development, but not detected until later in testing or deployment. Solutions usually require software changes as opposed to system tuning changes. This paper presents three new performance antipatterns and gives examples to illustrate them. These antipatterns will help developers and performance engineers avoid common perfor- mance problems. 1.0},
author = {Smith, Connie U and Williams, Lloyd G},
file = {:Users/naubergois/Downloads/moreanti.pdf:pdf},
journal = {Computer Measurement Group Conference},
pages = {717--725},
title = {{More New Software Performance AntiPatterns: EvenMore Ways to Shoot Yourself in the Foot}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.123.4517{\&}rep=rep1{\&}type=pdf},
year = {2003}
}



@article{Glover1986,
abstract = {Tabu Search is a meta-heuristic that guides a local heuristic search procedure to explore the solution space beyond local optimality. One of the main components of Tabu Search of Tabu Search is its use of adaptive memory, which creates a more flexible search behavior.},
author = {Glover, Fred and Mart{\'{i}}, Rafael},
file = {:Users/naubergois/Downloads/ts2.pdf:pdf},
journal = {Tabu Search},
pages = {1--16},
title = {{Tabu Search}},
year = {1986}
}

@article{Gay,
author = {Gay, Gregory},
file = {:Users/naubergois/Downloads/16mockito.pdf:pdf},
keywords = {automated unit test generation,real faults,search-based testing},
pages = {1--6},
title = {{Challenges in Using Search-Based Test Generation to Identify Real Faults in Mockito}}
}


@article{Wert2014,
abstract = {Performance problems such as high response times in software applications have a significant effect on the customer's satisfaction. In enterprise applications, performance problems are frequently manifested in inefficient or unnecessary communication patterns between software components originating from poor architectural design or implementation. Due to high manual effort, thorough performance analysis is often neglected, in practice. In order to overcome this problem, automated engineering approaches are required for the detection of performance problems. In this paper, we introduce several heuristics for measurement-based detection of well-known performance anti-patterns in inter-component communications. The detection heuristics comprise load and instrumentation descriptions for performance tests as well as corresponding detection rules. We integrate these heuristics with Dynamic Spotter, a framework for automatic detection of performance problems. We evaluate our heuristics on four evaluation scenarios based on an e-commerce benchmark (TPC-W) where the heuristics detect the expected communication performance anti-patterns and pinpoint their root causes. Copyright {\&}copy; 2014 ACM 978-1-4503-2577-6/14/06 ...{\$}15.00.},
author = {Wert, Alexander and Oehler, Marius and Heger, Christoph and Farahbod, Roozbeh},
doi = {10.1145/2602576.2602579},
file = {:Users/naubergois/Downloads/2014-qosa-messaging.pdf:pdf},
isbn = {9781450325776},
journal = {QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014)},
keywords = {Application programs;Customer satisfaction;},
pages = {3--12},
title = {{Automatic detection of performance anti-patterns in inter-component communications}},
url = {http://dx.doi.org/10.1145/2602576.2602579},
year = {2014}
}

@article{Arcelli2012,
abstract = {Identifying and removing the causes of poor performance in software systems are complex problems due to a variety of factors to take into account. Nowadays these problems are usually tackled after the software deployment only with human-based means, which frequently boil down to developer skills and previous experiences. Performance antipatterns can be used to cope with these problems since they capture typical design patterns that are known leading to performance problems, as well as refactoring actions that can be taken to remove them. The goal of this paper is to introduce an approach that allows the refactoring of architectural models, based on antipatterns, that aims at providing performance improvement. To this end, we use a Role-Based Modeling Language to represent: (i) antipattern problems as Source Role Models (SRMs), and (ii) antipattern solutions as Target Role Models (TRMs). Hence, SRM-TRM pairs represent new instruments in the hands of developers to achieve architectural model refactorings aimed at removing sources of performance problems. Model refactoring for antipattern removal can be in fact obtained by replacing an SRM with the corresponding TRM. This approach has been applied to a case study in the e-commerce domain, whose experimental results demonstrate its effectiveness. Copyright {\textcopyright} 2012 ACM.},
author = {Arcelli, Davide and Cortellessa, Vittorio and Trubiani, Catia},
doi = {10.1145/2304696.2304704},
file = {:Users/naubergois/Downloads/antipatterns-QoSA-2012.pdf:pdf},
isbn = {9781450313469},
journal = {Proceedings of the 8th international ACM SIGSOFT conference on Quality of Software Architectures (QoSA '12)},
keywords = {model refactoring,performance an-,software performance},
pages = {33--42},
title = {{Antipattern-Based Model Refactoring for Software Performance Improvement}},
url = {http://doi.acm.org/10.1145/2304696.2304704},
year = {2012}
}

@article{Cortellessa2007,
author = {Cortellessa, Vittorio and Frittella, Laurento},
file = {:Users/naubergois/Downloads/10.1007@978-3-540-75211-013.pdf:pdf},
keywords = {architectural,feedback,layered queueing networks,performance indices,software performance},
pages = {171--185},
title = {{A Framework for Automated Generation of Architectural Feedback from Software Performance Analysis}},
year = {2007}
}

@article{Smith2000,
author = {Smith, Connie U. and Williams, Lloyd G.},
doi = {10.1145/350391.350420},
file = {:Users/naubergois/Downloads/antipat.pdf:pdf},
isbn = {158113195X},
journal = {Proceedings of the second international workshop on Software and performance  - WOSP '00},
pages = {127--136},
title = {{Software performance antipatterns}},
url = {http://portal.acm.org/citation.cfm?doid=350391.350420},
year = {2000}
}



@book{Halili2008,
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Halili, Emily H.},
booktitle = {PACKT Publishing},
doi = {10.1017/CBO9781107415324.004},
eprint = {arXiv:1011.1669v3},
isbn = {9788578110796},
issn = {1098-6596},
keywords = {jmeter},
pmid = {25246403},
title = {{Apache JMeter: A practical beginner's guide to automated testing and performance measurement for your websites.}},
year = {2008}
}

@article{Aleti2016,
author = {Aleti, Aldeida and Moser, I. and Grunske, Lars},
doi = {10.1007/s10515-016-0197-7},
isbn = {1051501601},
issn = {15737535},
journal = {Automated Software Engineering},
keywords = {Fitness landscape characterisation,Genetic algorithms,Test data generation},
pages = {1--19},
title = {{Analysing the fitness landscape of search-based software testing problems}},
year = {2016}
}


@book{Jaziri2008,
author = {Jaziri, Wassim},
isbn = {9783902613349},
pages = {294},
title = {{Local Search Techniques: Focus on Tabu Search}},
year = {2008}
}


@article{Blum2003,
abstract = {The emergence of metaheuristics for solving difficult combinatorial optimization problems is one of the most notable achievements of the last two decades in operations research. This paper provides an account of the most recent developments in the field and identifies some common issues and trends. Examples of applications are also reported for vehicle routing and scheduling problems.},
author = {Blum, C. and Roli, A.},
doi = {10.1007/s10479-005-3971-7},
isbn = {0254-5330},
issn = {02545330},
journal = {ACM Computing Surveys},
keywords = {Combinatorial optimization,Metaheuristics,Unifying framework,Vehicle routing},
number = {3},
pages = {189--213},
title = {{Metaheuristics in combinatorial optimization: overview and conceptual comparison}},
volume = {35},
year = {2003}
}


@incollection{raidl2010metaheuristic,
  title={Metaheuristic hybrids},
  author={Raidl, G{\"u}nther R and Puchinger, Jakob and Blum, Christian},
  booktitle={Handbook of metaheuristics},
  pages={469--496},
  year={2010},
  publisher={Springer}
}

@article{DiAlesio2014,
	Abstract = {Real-Time Embedded Systems (RTES) in safety-critical domains, such as maritime and energy, must satisfy strict performance requirements to be deemed safe. Therefore, such systems have to be thoroughly tested to ensure their correct behavior even under the worst operating conditions. In this paper, we address the need of deriving worst case scenarios with respect to three common performance requirements, namely task deadlines, response time, and CPU usage. Specifically, we investigate whether this worst-case analysis can be effectively re-expressed as a Constrained Optimization Problem (COP) over the space of possible inputs to the system. Solving this problem means finding the sets of inputs that maximize the chance to violate performance requirements at runtime. Such inputs can in turn be used to test if the target RTES meets the expected performance even in the worst case. We develop an OPL model for IBM ILOG CP Optimizer that implements a task priority-based preemptive scheduling, and apply it to a case study from the maritime and energy domain. Our validation shows that (1) the input to our model can be provided with reasonable effort in an industrial setting, and (2) the COP effectively identifies test cases that maximize deadline misses, response time, and CPU usage.},
	Author = {{Di Alesio}, Stefano and Nejati, Shiva and Briand, Lionel and Gotlieb, Arnaud},
	Doi = {10.1007/978-3-319-10428-7{\_}58},
	Journal = {Principles and Practice of Constraint Programming},
	Pages = {813--830},
	Title = {{Worst-Case Scheduling of Software Tasks -- A Constraint Optimization Model to Support Performance Testing}},}

@article{DiAlesio2013,
	Abstract = {Safety-critical Real Time Embedded Systems (RT-ESs) are usually subject to strict timing and performance requirements that must be satisfied for the system to be deemed safe. In this paper, we use effective search strategies whose goal is finding worst case scenarios with respect to deadline misses. Such scenarios can in turn be used to test the target RTES and ensure that it satisfies its timing requirements even under worst case conditions. Specifically, we develop an approach based on Constraint Programming (CP) to automate the generation of test cases that reveal, or are likely to, task deadline misses. We evaluate it through a comparison with a state-of-the-art approach based on Genetic Algorithms (GA). In particular, we compare CP and GA in five case studies for efficiency, effectiveness, and scalability. Our experimental results show that, on the largest and more complex case studies, CP performs significantly better than GA. Furthermore, CP offers some advantages over GA, such as it guarantees a complete search when there is sufficient time, and, being deterministic, it doesn't rely on parameters that potentially have a significant effect on the search and therefore need to be tuned. Hence, we conclude that our results are encouraging and suggest this is an advantageous approach for stress testing of RTESs with respect to timing constraints.},
	Author = {{Di Alesio}, S and Nejati, S and Briand, L and Gotlieb, A},
	Doi = {10.1109/ISSRE.2013.6698915},
	File = {:Users/naubergois/Documents/10.0000@www.computer.org@generic-DD33B05EC8B4.pdf:pdf},
	Isbn = {9781479923663},
	Journal = {IEEE Xplore},
	Keywords = {constraint pro-,real-time systems,stress testing},
	Pages = {158--167},
	Title = {{Stress testing of task deadlines: A constraint programming approach}},
	Year = {2013}}

@article{Alesio2015,
	Author = {Alesio, Stefano D I and Briand, Lionel C and Nejati, Shiva and Gotlieb, Arnaud},
	File = {:Users/naubergois/Documents/a4-dialesio.pdf:pdf},
	Journal = {ACM Transactions on Software Engineering and Methodology},
	Number = {1},
	Title = {{Combining Genetic Algorithms and Constraint Programming}},
	Volume = {25},
	Year = {2015}}

@article{Raidl2006,
	Abstract = {Manifold possibilities of hybridizing individual metaheuristics with each other and/or with algorithms from other fields exist. A large number of publications documents the benefits and great success of such hybrids. This article overviews several popular hybridization approaches and classifies them based on various characteristics. In particular with respect to low-level hybrids of different metaheuristics, a unified view based on a common pool template is described. It helps in making similarities and different key components of existing metaheuristics explicit. We then consider these key components as a toolbox for building new, effective hybrid metaheuristics. This approach of thinking seems to be superior to sticking too strongly to the philosophies and historical backgrounds behind the different metaheuristic paradigms. Finally, particularly promising possibilities of combining metaheuristics with constraint programming and integer programming techniques are highlighted.},
	Author = {Raidl, R},
	Doi = {10.1007/11890584{\_}1},
	File = {:Users/naubergois/Documents/pres{\_}gunther.pdf:pdf},
	Isbn = {9783540463849},
	Issn = {03029743},
	Journal = {Hybrid Metaheuristics (LNCS 4030)},
	Pages = {1--12},
	Title = {{A Unified View on Hybrid Metaheuristics}},
	Year = {2006}}

@article{Pohlheim2005,
	Abstract = {Whereas the verification of non-safety-related embedded software typically focuses on demonstrating that the implementation fulfills its functional requirements, this is not sufficient for safety-relevant systems. In this case, the control software must also meet application- specific safety requirements.Safety requirements typically arise from the application of hazard and/or safety analysis techniques, e.g., FMEA, FTA or SHARD. During the downstream development process it must be shown that these requirements cannot be violated. This can be achieved utilizing different techniques. One way of providing evidence that violations of the safety properties identified cannot occur is to thoroughly test each of the safety requirements.This paper introduces Evolutionary Safety Testing (EST), a fully automated procedure for the safety testing of embedded control software. EST employs extended evolutionary algorithms in an optimization process which aggressively tries to find test data sequences that cause the test object to violate a given safety requirement.A compact description formalism for input sequences for safety testing is presented, which is compatible with description techniques used during other test process stages. This compact description allows 1) an efficient application of evolutionary algorithms (and other optimization techniques) and 2) the description of long test sequences necessary for the adequate stimulation of real-world systems. The objective function is designed in such a way that optimal values represent test data sequences which violate a given safety requirement. By means of repeated input sequence generation, software execution and the subsequent evaluation of the objective function each safety requirement is extensively tested.The use of EST for the safety testing of automotive control software is demonstrated using safety requirements of an adaptive cruise control (ACC) system.The EST approach can easily be integrated into an overall software test strategy which combines different test design techniques with specific test objectives.},
	Author = {Pohlheim, Hartmut and Conrad, Mirko and Griep, Arne},
	Doi = {10.4271/2005-01-0750},
	Journal = {Analysis},
	Number = {724},
	Pages = {804----814},
	Title = {{Evolutionary Safety Testing of Embedded Control Software by Automatically Generating Compact Test Data Sequences}},
	Year = {2005}}

@article{Gross2000,
	Abstract = {Software architecture design approaches typically treat architecture as an abstraction of the implemented system. However, doing so means that the concepts, languages, notations, and tools for architecture are much more closely related to those of detailed design and implementation than to those of software requirements. Thus the gap between requirements and architecture represents a paradigm shift, while that between architecture and detailed design does not. Global Analysis, which is part of the Siemens Four Views architecture design approach, is a set of activities that serves to reduce the magnitude of this gap by guiding the architecture design process, capturing design rationale, and supporting traceability between requirements and architecture. In this paper Global Analysis is re-examined in light of five years of teaching it, reflecting on it, comparing it to other approaches, and examining how it was applied in four new systems. This experience confirms the value of the Global Analysis activities and the importance of capturing its results. In some cases the benefit went beyond that envisioned, and in other cases Global Analysis was not applied as expected. Because the templates that are provided for Global Analysis results have such a strong influence on how the activities were performed, this will be the focus of future changes},
	Author = {Gross, Hg and Jones, Bryan F and Eyres, David E},
	Doi = {10.1049/ip-sen},
	File = {:Users/naubergois/Documents/gross2000.pdf:pdf},
	Isbn = {0818669101},
	Issn = {14625970},
	Journal = {Software, IEE Proceedings-},
	Number = {2},
	Pages = {25--30},
	Pmid = {18015135},
	Title = {{Structural performance measure of evolutionary testing applied to worst-case timing of real-time systems}},
	Volume = {147},
	Year = {2000}}

@article{Smeral2014,
	Author = {\v{S}meral, Ron},
	File = {:Users/naubergois/Dropbox/dp.pdf:pdf},
	Title = {{Modern Performance Tools Applied}},
	Year = {2014}}

@article{Puchinger2005,
	Abstract = {In this survey we discuss different state-of-the-art approaches of combining exact algorithms and metaheuristics to solve combinatorial optimization problems. Some of these hybrids mainly aim at providing optimal solutions in shorter time, while others primarily focus on getting better heuristic solutions. The two main categories in which we divide the approaches are collaborative versus integrative combinations.We further classify the different techniques in a hierarchical way. Altogether, the surveyed work on combinations of exact algorithms and metaheuristics documents the usefulness and strong potential of this research direction.},
	Author = {Puchinger, Jakob and Raidl, R},
	Doi = {10.1007/11499305\_5},
	File = {:Users/naubergois/Documents/puchinger-05.pdf:pdf},
	Isbn = {9783540263197},
	Issn = {03029743},
	Journal = {Artificial Intelligence and Knowledge Engineering Applications a Bioinspired Approach},
	Pages = {41--53},
	Title = {{Combining Metaheuristics and Exact Algorithms in Combinatorial Optimization : A Survey and Classification}},
	Volume = {3562},
	Year = {2005}}

@article{Blum2012,
	Abstract = {Research in metaheuristics for combinatorial optimization problems has lately experienced a noteworthy shift towards the hybridization of metaheuristics with other techniques for optimization. At the same time, the focus of research has changed from being rather algorithm-oriented to being more problem-oriented. Nowadays the focus is on solving the problem at hand in the best way possible, rather than promoting a certain metaheuristic. This has led to an enormously fruitful cross-fertilization of different areas of optimization. This cross-fertilization is documented by a multitude of powerful hybrid algorithms that were obtained by combining components from several different optimization techniques. Hereby, hybridization is not restricted to the combination of different metaheuristics but includes, for example, the combination of exact algorithms and metaheuristics. In this work we provide a survey of some of the most important lines of hybridization. The literature review is accompanied by the presentation of illustrative examples. {\copyright} 2010 Elsevier B.V. All rights reserved.},
	Author = {Blum, Christian},
	Doi = {10.1007/978-3-642-33860-1\_1},
	File = {:Users/naubergois/Documents/blum-11.pdf:pdf},
	Isbn = {9783642338595},
	Issn = {03029743},
	Journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	Keywords = {combinatorial optimization,hybrid metaheuristics},
	Number = {6},
	Pages = {1--10},
	Publisher = {Elsevier B.V.},
	Title = {{Hybrid metaheuristics in combinatorial optimization: A tutorial}},
	Volume = {7505 LNCS},
	Year = {2012}}

@article{Wang2010,
	Author = {Wang, Xingen and Zhou, Bo and Li, Wei},
	Doi = {10.1109/ISPA.2010.24},
	File = {:Users/naubergois/Dropbox/WangXingen-ISPA2010.pdf:pdf},
	Isbn = {978-1-4244-8095-1},
	Journal = {International Symposium on Parallel and Distributed Processing with Applications},
	Keywords = {load model,load testing,markov chains,model,performance engineering,usage},
	Pages = {483--490},
	Title = {{Model Based Load Testing of Web Applications}},
	Year = {2010}}

@book{Smith:2012qr,
	Author = {Smith, J.~M. and Jones, A.~B.},
	Edition = {7th},
	Publisher = {Publisher},
	Title = {{B}ook {T}itle},
	Year = {2012}}

@article{Smith:2013jd,
	Author = {Jones, A.~B. and Smith, J.~M.},
	Journal = {{J}ournal {T}itle},
	Month = {March},
	Number = {52},
	Pages = {123-456},
	Publisher = {Publisher},
	Title = {{A}rticle {T}itle},
	Volume = {13},
	Year = {2013}}

@article{Tlili1917,
	Author = {Tlili, Marouane and Wappler, Stefan and Sthamer, Harmen},
	Isbn = {1595931864},
	Journal = {Technology},
	Keywords = {daimler-,harmen,sthamer},
	Pages = {1917--1924},
	Title = {{Improving Evolutionary Real-Time Testing}},
	Year = {1917}}

@phdthesis{Jiang2010,
	Author = {Jiang, ZM},
	Booktitle = {\ldots symposium on Software testing and analysis},
	Title = {{Automated analysis of load testing results}},
	Url = {http://dl.acm.org/citation.cfm?id=1831726},
	Year = {2010}}

@article{Jiang2009,
	Abstract = {The goal of a load test is to uncover functional and per- formance problems of a system under load. Performance problems refer to the situations where a system suffers from unexpectedly high response time or low throughput. It is difficult to detect performance problems in a load test due to the absence of formally-defined performance objectives and the large amount of data that must be examined. In this paper, we present an approach which automati- cally analyzes the execution logs of a load test for perfor- mance problems. We first derive the system's performance baseline from previous runs. Then we perform an in-depth performance comparison against the derived performance baseline. Case studies show that our approach produces few false alarms (with a precision of 77\%) and scales well to large industrial systems.},
	Author = {Jiang, ZM and Hassan, AE},
	Journal = {\ldots , 2009. ICSM 2009. IEEE \ldots},
	Title = {{Automated performance analysis of load tests}},
	Year = {2009}}

@article{Afzal2009a,
	Abstract = {Search-based software testing is the application of metaheuristic search techniques to generate software tests. The test adequacy criterion is transformed into a fitness function and a set of solutions in the search space are evaluated with respect to the fitness function using a metaheuristic search technique. The application of metaheuristic search techniques for testing is promising due to the fact that exhaustive testing is infeasible considering the size and complexity of software under test. Search-based software testing has been applied across the spectrum of test case design methods; this includes white-box (structural), black-box (functional) and grey-box (combination of structural and functional) testing. In addition, metaheuristic search techniques have also been applied to test non-functional properties. The overall objective of undertaking this systematic review is to examine existing work into non-functional search-based software testing (NFSBST). We are interested in types of non-functional testing targeted using metaheuristic search techniques, different fitness functions used in different types of search-based non-functional testing and challenges in the application of these techniques. The systematic review is based on a comprehensive set of 35 articles obtained after a multi-stage selection process and have been published in the time span 1996-2007. The results of the review show that metaheuristic search techniques have been applied for non-functional testing of execution time, quality of service, security, usability and safety. A variety of metaheuristic search techniques are found to be applicable for non-functional testing including simulated annealing, tabu search, genetic algorithms, ant colony methods, grammatical evolution, genetic programming (and its variants including linear genetic programming) and swarm intelligence methods. The review reports on different fitness functions used to guide the search for each of the categories of execution time, safety, usability, quality of service and security; along with a discussion of possible challenges in the application of metaheuristic search techniques. ?? 2009 Elsevier B.V. All rights reserved.},
	Author = {Afzal, Wasif and Torkar, Richard and Feldt, Robert},
	Doi = {10.1016/j.infsof.2008.12.005},
	File = {:Users/naubergois/Dropbox/X12-searchbased-testing-afzal-ist09.pdf:pdf},
	Isbn = {0950-5849},
	Issn = {09505849},
	Journal = {Information and Software Technology},
	Keywords = {Non-functional system properties,Search-based software testing,Systematic review},
	Number = {6},
	Pages = {957--976},
	Publisher = {Elsevier B.V.},
	Title = {{A systematic review of search-based testing for non-functional system properties}},
	Volume = {51},
	Year = {2009}}

@article{Stations,
	Author = {{Wegener, Joachim and Pitschinetz, Roman and Sthamer}, Harmen},
	Journal = {Proceedings of the 1st International Workshop on Automated Program Analysis, Testing and Verification (WAPATV'00)},
	Title = {{Automated Testing of Real-Time Tasks}},
	Year = {2000}}

@article{Nevedrov2007,
	Author = {Nevedrov, Dmitri},
	Pages = {1--11},
	Title = {{Using JMeter to Performance Test Web Services}},
	Year = {2007}}

@book{Molyneaux2009,
	Abstract = {This practical book provides a step-by-step approach to testing mission-critical applications for scalability and performance before they're deployed -- a vital topic to which other books devote one chapter, if that. Businesses today live and die by network applications and web services. Because of the increasing complexity of these programs, and the pressure to deploy them quickly, many professionals don't take the time to ensure that they'll perform well and scale effectively. The Art of Application Performance Testing explains the complete life cycle of the testing process, and demonstrates best practices to help you plan, gain approval for, coordinate, and conduct performance tests on your applications. With this book, you'll learn to: Set realistic performance testing goals Implement an effective application performance testing strategy Interpret performance test results Cope with different application technologies and architectures Use automated performance testing tools Test traditional local applications, web-based applications, and web services (SOAs) Recognize and resolves issues that are often overlooked in performance tests Written by a consultant with 30 years of experience in the IT industry and over 12 years experience with performance testing, this easy-to-read book is illustrated with real-world examples and packed with practical advice. The Art of Application Performance Testing thoroughly explains the pitfalls of an inadequate testing strategy and offers you a robust, structured approach for ensuring that your applications perform well and scale effectively when the need arises. "Ian has maintained a vendor-agnostic methodology beautifully in this material. The metrics and graphs, along with background information provided in his case studies, eloquently convey to the reader, 'Methodology above all, tools at your discretion...' Ian's expertise shines through throughout the entire reading experience." -- Matt St. Onge, Enterprise Solution Architect, HCL Technologies America / Teradyne},
	Author = {Molyneaux, Ian},
	File = {:home/74397176353/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Molyneaux - 2009 - The Art of Application Performance Testing(2).pdf:pdf},
	Isbn = {9780596551056},
	Keywords = {COMPUTERS / Computer Literacy,COMPUTERS / Computer Science,COMPUTERS / Data Processing,COMPUTERS / Hardware / General,COMPUTERS / Machine Theory,COMPUTERS / Reference,Computers / Information Technology,Computers / Software Development \& Engineering / G,Computers / Software Development \& Engineering / S,Computers / Web / Design},
	Language = {en},
	Mendeley-Tags = {COMPUTERS / Computer Literacy,COMPUTERS / Computer Science,COMPUTERS / Data Processing,COMPUTERS / Hardware / General,COMPUTERS / Machine Theory,COMPUTERS / Reference,Computers / Information Technology,Computers / Software Development \& Engineering / G,Computers / Software Development \& Engineering / S,Computers / Web / Design},
	Month = jan,
	Pages = {159},
	Publisher = {"O'Reilly Media, Inc."},
	Shorttitle = {The Art of Application Performance Testing},
	Title = {{The Art of Application Performance Testing: Help for Programmers and Quality Assurance}},
	Year = {2009},
	edition  = {1st}}

@article{Sullivan,
	Author = {Sullivan, Michael O and V\"{o}ssner, Siegfried and Wegener, Joachim and Ag, Daimler-benz},
	File = {:Users/naubergois/Dropbox/eurostar1998.pdf:pdf},
	Pages = {1--20},
	Title = {{Testing Temporal Correctness of Real-Time Systems --- A New Approach Using Genetic Algorithms and Cluster Analysis ---}}}

@inproceedings{Draheim2006b,
	Author = {Draheim, D. and Grundy, J. and Hosking, J. and Lutteroth, C. and Weber, G.},
	Booktitle = {Conference on Software Maintenance and Reengineering (CSMR'06)},
	Doi = {10.1109/CSMR.2006.43},
	Isbn = {0-7695-2536-9},
	Issn = {1052-8725},
	Title = {{Realistic load testing of Web applications}},
	Year = {2006}}


@article{Vetoio2011,
author = {Vetoio, Via},
file = {:Users/naubergois/Downloads/PhDThesis-CatiaTrubiani.pdf:pdf},
journal = {Language},
title = {{PhD Thesis in Computer Science Automated generation of architectural feedback from software performance analysis results Catia Trubiani}},
year = {2011}
}

	
	
@book{brown1998antipatterns,
  title={AntiPatterns: refactoring software, architectures, and projects in crisis},
  author={Brown, William H and Malveau, Raphael C and McCormick, Hays W and Mowbray, Thomas J},
  year={1998},
  publisher={John Wiley \& Sons, Inc.}
}
	
@inproceedings{Gois2016,
	Author = {Gois, N. and Porfirio, P. and Coelho, A. and Barbosa, T.},
	Booktitle = {Proceedings of the 2016 Latin American Computing Conference (CLEI)},
	Isbn = {978-1-5090-1632-7},
	Title = {{Improving Stress Search Based Testing using a Hybrid Metaheuristic Approach}},
	Pages = {718--728},
	Year = {2016}}	
	

@phdthesis{Luiz2011,
	Author = {Luiz, Artur and Freitas, Cunha and Prof, Orientadora and Vieira, Renata},
	School = {Pontif{\'\i}cia Universidade Cat{\'o}lica do Rio Grande do Sul},
	Title = {{Ontologias para Teste de Desempenho de Software}},
	Year = {2011}}

@article{Fe2004,
	Author = {F\'{e}, Iure De Sousa and dos Santos, Pedro de Alc\^{a}ntara},
	Title = {{Os custos dos Testes de Desempenho e Estresse}},
	Year = {2004}}

@article{Babbar2011,
	Author = {Babbar, C and Bajpai, N and Sarmah, Dk},
	Isbn = {9789380544007},
	Journal = {International Journal of Technology},
	Title = {{Web Application Performance Analysis based on Component Load Testing}},
	Year = {2011}}

@article{Avritzer1995,
	Author = {Avritzer, A. and Weyuker, E.J.},
	Issn = {0098-5589},
	Journal = {Software Engineering, IEEE \ldots},
	Keywords = {Automatic testing,Communication industry,Computer industry,Markov chain,Markov processes,Performance evaluation,Resource management,Software algorithms,Software systems,System testing,automatic test case generation algorithms,automatic test software,domain-based reliability measure,fault detection,industrial software systems,load test suites,load testing,program testing,reliability,resource allocation,resource allocation mechanisms,software reliability,software testing,system degradation,telecommunication computing,telecommunications software},
	Mendeley-Tags = {Automatic testing,Communication industry,Computer industry,Markov chain,Markov processes,Performance evaluation,Resource management,Software algorithms,Software systems,System testing,automatic test case generation algorithms,automatic test software,domain-based reliability measure,fault detection,industrial software systems,load test suites,load testing,program testing,reliability,resource allocation,resource allocation mechanisms,software reliability,software testing,system degradation,telecommunication computing,telecommunications software},
	Number = {9},
	Pages = {705--716},
	Title = {{The automatic generation of load test suites and the assessment of the resulting software}},
	Volume = {21},
	Year = {1995}}

@article{Garousi2010,
	Author = {Garousi, Vahid},
	Doi = {10.1109/TSE.2010.5},
	Issn = {0098-5589},
	Journal = {IEEE Transactions on Software Engineering},
	Keywords = {empirical analysis,genetic algorithms,search-based testing,stress testing,test automation,test tools},
	Month = nov,
	Number = {6},
	Pages = {778--797},
	Title = {{A Genetic Algorithm-Based Stress Test Requirements Generator Tool and Its Empirical Evaluation}},
	Volume = {36},
	Year = {2010}}

@inproceedings{Avritzer1993d,
	Address = {New York, NY, USA},
	Annote = {From Duplicate 1 ( },
	Author = {Avritzer, Alberto and Larson, Brian},
	Booktitle = {ACM SIGSOFT Software Engineering Notes},
	Doi = {10.1145/154183.154244},
	Isbn = {0-89791-608-5},
	Pages = {82--88},
	Publisher = {ACM},
	Series = {ISSTA '93},
	Title = {{Load Testing Software Using Deterministic State Testing}},
	Year = {1993}}

@article{Avritzer1994,
	Address = {New York, New York, USA},
	Author = {Avritzer, Alberto and Weyuker, EJ},
	Doi = {10.1145/186258.186507},
	Isbn = {0897916832},
	Journal = {\ldots international symposium on Software testing \ldots},
	Pages = {44--57},
	Publisher = {ACM Press},
	Title = {{Generating test suites for software load testing}},
	Year = {1994}}

@article{Garousi2006,
	Author = {Garousi, Vahid},
	Isbn = {9780494262252},
	Number = {August},
	Title = {{Traffic-aware Stress Testing of Distributed Real-Time Systems based on UML Models using Genetic Algorithms}},
	Year = {2006}}

@article{Santos2011,
	Author = {Santos, I de Sousa and Santos, AR and Neto, PA dos Santos},
	Journal = {SEKE},
	Keywords = {- software testing,data generation,experimental study,however,limitations in,non-functional,of performance and stress,requirements,scripts,scripts from functional testing,testing,tool enabled the generation},
	Title = {{Reusing Functional Testing in order to Decrease Performance and Stress Testing Costs.}},
	Year = {2011}}

@book{bernard2012foundations,
	Author = {Bernard, Pierre},
	Publisher = {Van Haren},
	Title = {Foundations of ITIL},
	Year = {2012}}

@article{Abu-nimeh2001,
	Author = {Abu-nimeh, Saeed and Nair, Suku and Marchetti, Marco},
	Keywords = {bandwidth throttle,denial of service,ramp-up time,response time,stress-testing,think,time,ttfb,ttlb},
	Title = {{Avoiding Denial of Service via Stress Testing}},
	Year = {2001}}

@article{Garousi2008,
	Author = {Garousi, Vahid},
	Doi = {10.1145/1389095.1389433},
	Isbn = {9781605581309},
	Journal = {Proceedings of the 10th annual conference on Genetic and evolutionary computation - GECCO '08},
	Keywords = {empirical analysis,genetic algorithms,stress testing},
	Pages = {1743},
	Title = {{Empirical analysis of a genetic algorithm-based stress test technique}},
	Year = {2008}}

@article{Chakravarty2010,
	Author = {Chakravarty, A},
	Journal = {Information Technology: New Generations ( \ldots},
	Title = {{Stress testing an ai based web service: A case study}},
	Year = {2010}}

@article{Acharya2009,
	Author = {Acharya, Mithun and Kommineni, Vamshidhar},
	Doi = {10.1109/ASE.2009.95},
	Isbn = {9780769538914},
	Issn = {1527-1366},
	Journal = {ASE2009 - 24th IEEE/ACM International Conference on Automated Software Engineering},
	Pages = {409--420},
	Title = {{Mining health models for performance monitoring of services}},
	Year = {2009}}

@article{Catelani2011,
	Doi = {10.1016/j.csi.2010.06.006},
	File = {:Users/naubergois/Dropbox/1-s2.0-S092054891000084X-main.pdf:pdf},
	Isbn = {09205489 (ISSN)},
	Issn = {09205489},
	Journal = {Computer Standards and Interfaces},
	Keywords = {Mean time to overflow,Quality in use,Software automated testing,Software reliability},
	Number = {2},
	Pages = {152--158},
	Publisher = {Elsevier B.V.},
	Title = {{Software automated testing: A solution to maximize the test plan coverage and to increase software reliability and quality in use}},
	Volume = {33},
	Year = {2011}}

@article{Wegener1997,
	Abstract = {The development of real-time systems is an essential industrial activity whose importance is increasing. The most important analytical method to assure the quality of real-time systems is dynamic testing. Testing is the only method which examines the actual run-time behaviour of real-time software, based on an execution in the real application environment. Dynamic aspects like the duration of computations, the memory actually needed, or the synchronization of parallel processes are of major importance for the correct function of real-time systems and have to be tested. A comprehensive investigation of existing software test methods shows that they mostly concentrate on testing for functional correctness. They are not suited for an examination of temporal correctness which is essential to real-time systems. Very small systems show a wide range of different execution times. Therefore, existing test procedures must be supplemented by new methods, which concentrate on determining whether the system violates its specified timing constraints. In general, this means that outputs are produced too early or their computation takes too long. The task of the tester is to find the inputs with the longest or shortest execution times to check whether they produce a temporal error. If the search for such inputs is interpreted as a problem of optimization, genetic algorithms can be used to find the inputs with the longest or shortest execution times automatically. The fitness function is the execution time measured in processor cycles. Experiments using genetic algorithms on a number of programs with up to 1511 LOC and 843 integer input parameters have successfully identified new longer and shorter paths than had been found using random testing or systematic testing. Genetic algorithms are able therefore to check large programs and they show considerable promise in establishing the validity of the temporal behaviour of real-time software.},
	Author = {Wegener, Joachim and Sthamer, Harmen and Jones, Bryan F and Eyres, David E},
	Doi = {10.1023/A:1018551716639},
	Issn = {0963-9314, 1573-1367},
	Journal = {Software Quality Journal},
	Keywords = {embedded systems,genetic algorithms,real time systems,temporal behaviour,testing},
	Number = {2},
	Pages = {127--135},
	Title = {{Testing real-time systems using genetic algorithms}},
	Url = {http://www.springerlink.com/index/uh26067rt3516765.pdf},
	Volume = {6},
	Year = {1997}}

@inproceedings{Alander,
	Abstract = {In this work we are studying possibilities to test software using genetic algorithm search. The idea is to produce test cases in order to find problematic situations like processing time extremes. The proposed test method comes under the heading of automated dynamic stress testing. Keywords: genetic algorithms, software engineering, dynamic stress testing 1 Introduction Real-time software is increasingly applied to products in which failure may have severe consequences, thus the requirements for correctness and reliability are getting higher, too. In very reliable sequential programs, the rate of errors should be less than 10 errors/1000 lines of code, to avoid functional failure. Achieving this level is very labourious, because the amount of program testing work grows exponentially with code size. Testing software manually is slow, expensive and demands inventiveness. Automated testing can reduce both the time and costs needed for performing tests. Exhaustive test data generation is...},
	Annote = {From Duplicate 1 ( },
	Author = {Alander, Jarmo T. JT and Mantere, Timo and Turunen, Pekka},
	Booktitle = {Neural Nets and Genetic Algorithms},
	Date-Modified = {2015-12-05 06:11:49 +0000},
	Title = {{Genetic Algorithm Based Software Testing}},
	Year = {1998}}

@article{Barros2007,
	Author = {Barros, Marcelo De and Shiau, Jing},
	File = {:Users/naubergois/Library/Application Support/Mendeley Desktop/Downloaded/Barros, Shiau - 2007 - Web services wind tunnel On performance testing large-scale stateful web services.pdf:pdf},
	Journal = {\ldots and Networks, 2007. \ldots},
	Title = {{Web services wind tunnel: On performance testing large-scale stateful web services}},
	Year = {2007}}

@article{Weyuker2000,
	Abstract = {An approach to software performance testing is discussed. A case study describing the experience of using this approach for testing the performance of a system used as a gateway in a large industrial client/server transaction processing application is presented.},
	Author = {Weyuker, EJ and Vokolos, FI},
	Doi = {10.1109/32.888628},
	Issn = {0098-5589},
	Journal = {IEEE transactions on software engineering},
	Keywords = {Software performance testing,performance testing.,program testing,software testing},
	Mendeley-Tags = {Software performance testing,performance testing.,program testing,software testing},
	Number = {12},
	Pages = {1147--1156},
	Shorttitle = {Experience with Performance Testing of Software Sy},
	Title = {{Experience with performance testing of software systems: issues, an approach, and case study}},
	Volume = {26},
	Year = {2000}}

@article{Raiha2010,
	Abstract = {This survey investigates search-based approaches to software design. The basics of the most popular meta-heuristic algorithms are presented as background to the search-based viewpoint. Software design is considered from a wide viewpoint, including topics that can also be categorized as software maintenance or re-engineering. Search-based approaches have been used in research from the high architecture design level to software clustering and finally software refactoring. Enhancing and predicting software quality with search-based methods is also taken into account as a part of the design process. The background for the underlying software engineering problems is discussed, after which search-based approaches are presented. Summarizing remarks and tables collecting the fundamental issues of approaches for each type of problem are given. The choices regarding critical decisions, such as representation and fitness function, when used in meta-heuristic search algorithms, are emphasized and discussed in detail. Ideas for future research directions are also given. {\copyright} 2010 Elsevier Inc.},
	Author = {R\"{a}ih\"{a}, Outi},
	Doi = {10.1016/j.cosrev.2010.06.001},
	Isbn = {15740137},
	Issn = {15740137},
	Journal = {Computer Science Review},
	Keywords = {Search algorithms,Search-based software engineering,Software design,Software quality},
	Number = {4},
	Pages = {203--249},
	Publisher = {Elsevier Inc.},
	Title = {{A survey on search-based software design}},
	Volume = {4},
	Year = {2010}}

@article{Mohamed2012,
	Abstract = {With the recent rapid development of mobile devices in terms of processing power, memory and storage capabilities coupled with the advancements of wireless technology in terms of higher data transmission rates such as 3G and 4G, it has now become feasible to host Web services on mobile devices. In this paper we propose a lightweight framework for hosting Web services on mobile devices. We further evaluate and provide a comparative analysis for hosting RESTful Web services versus SOAP-based Web services on our framework. Our experimental results and analysis indicate that RESTful Web services are less resource-consuming and more efficient for the implementation and provisioning of Web services from resource-constrained mobile devices. ?? 2012 Published by Elsevier Ltd.},
	Author = {Mohamed, KamalEldin and Wijesekera, Duminda},
	Doi = {10.1016/j.procs.2012.06.095},
	Isbn = {1877-0509},
	Issn = {18770509},
	Journal = {Procedia Computer Science},
	Keywords = {Lightweight framework,Mobile web server,REST,SOAP,Web services},
	Pages = {744--751},
	Publisher = {Duminda Wijesekera},
	Title = {{Performance analysis of web services on mobile devices}},
	Volume = {10},
	Year = {2012}}

@book{reeves1993modern,
	Author = {Reeves, Colin R},
	Publisher = {John Wiley \& Sons, Inc.},
	Title = {Modern heuristic techniques for combinatorial problems},
	Year = {1993}}

@article{Sandler2004,
	Abstract = {The classic, landmark work on software testingThe hardware and software of computing have changed markedly in the three decades since the first edition of The Art of Software Testing, but this book's powerful underlying analysis has stood the test of time. Whereas most books on software testing target particular development techniques, languages, or testing methods, The Art of Software Testing, Third Edition provides a brief but powerful and comprehensive presentation of time-proven software testing approaches. If your software development project is mission critical, this book is an investment that will pay for itself with the first bug you find.The new Third Edition explains how to apply the book's classic principles to today's hot topics including:Testing apps for iPhones, iPads, BlackBerrys, Androids, and other mobile devicesCollaborative (user) programming and testingTesting for Internet applications, e-commerce, and agile programming environmentsWhether you're a student looking for a testing guide you'll use for the rest of your career, or an IT manager overseeing a software development team, The Art of Software Testing, Third Edition is an expensive book that will pay for itself many times over.},
	Author = {Sandler, Corey and Badgett, Tom and Thomas, TM},
	File = {:Users/naubergois/Downloads/The Art of Software Testing, 3rd Edition.pdf:pdf},
	Isbn = {9781118133156},
	Keywords = {Business \& Economics / Reference,Computers / Information Technology},
	Language = {en},
	Mendeley-Tags = {Business \& Economics / Reference,Computers / Information Technology},
	Month = sep,
	Pages = {200},
	Publisher = {John Wiley \& Sons},
	Title = {{The Art of Software Testing}},
	Year = {2004}}

@book{Erinle2013,
	Author = {Erinle, Bayo},
	File = {:Users/naubergois/Dropbox/OPR/papers/performance-testing-with-jmeter-2-9.pdf:pdf},
	Isbn = {9781782165842},
	Title = {{Performance Testing With JMeter 2.9}},
	Year = {2013}}

@misc{Corporation2007,
	Abstract = {Performance Testing Guidance for Web Applications provides an end-to-end approach for implementing performance testing. Whether you are new to performance testing or looking for ways to improve your current performance-testing approach, you will gain insights that you can tailor to your specific scenarios.},
	Address = {United States?},
	Author = {Corporation, Microsoft},
	Edition = {1 edition},
	Isbn = {9780735625709},
	Language = {English},
	Month = nov,
	Pages = {288},
	Publisher = {Microsoft Press},
	Title = {{Performance Testing Guidance for Web Applications}},
	Url = {http://www.amazon.com/Performance-Testing-Guidance-Web-Applications/dp/0735625700 http://msdn.microsoft.com/en-us/library/bb924375.aspx},
	Year = {2007},
	Bdsk-Url-1 = {http://www.amazon.com/Performance-Testing-Guidance-Web-Applications/dp/0735625700%20http://msdn.microsoft.com/en-us/library/bb924375.aspx}}

@article{Snellman,
	Author = {Snellman, Niclas and Ashraf, Adnan and Porres, Ivan},
	File = {:Users/naubergois/Library/Application Support/Mendeley Desktop/Downloaded/Snellman, Ashraf, Porres - Unknown - Towards Automatic Performance and Scalability Testing of Rich Internet Applications in the Cloud(2).pdf:pdf},
	Keywords = {-performance testing,a flat performance curve,application should ideally maintain,cloud computing,intended maximum load level,rich in-,scalability testing,ternet applications,until it reaches its},
	Title = {{Towards Automatic Performance and Scalability Testing of Rich Internet Applications in the Cloud}}}

@article{Cohen2004,
	Abstract = {This paper studies the use of statistical induction techniques as a basis for automated performance diagnosis and performance management. The goal of the work is to develop and evaluate tools for offline and online analysis of system metrics gathered from instrumentation in Internet server platforms. We use a promising class of probabilistic models (Tree-Augmented Bayesian Networks or TANs) to identify combinations of system-level metrics and threshold values that correlate with high-level with Service Level Objectives (SLOs) for average-case response timein a three-tier Web service under a variety of conditions. Experimental results from a testbed show that TAN models involving small subsets of metrics capture patterns of performance behavior in a way that is accurate and yields insights into the causes of observed performance effects. TANs are extremely efficient to represent and evaluate, and they have interpretability properties that make them excellent candidates for automated diagnosis and control. We explore the use of TAN models for offline forensic diagnosis, and in a limited online setting for performance forecasting with stable workloads.},
	Author = {Cohen, Ira and Goldszmidt, Moises and Kelly, Terence and Symons, Julie and Chase, Jeffrey S},
	File = {:Users/naubergois/Dropbox/HPL-2004-183.pdf:pdf},
	Journal = {Small},
	Number = {December},
	Pages = {6--8},
	Title = {{Correlating instrumentation data to system states : A building block for automated diagnosis and control performance forecasting automated performance diagnosis and performance management . The goal of the work is to develop and evaluate tools for offline}},
	Year = {2004}}

@article{Biolchini2005,
	Author = {Biolchini, Jorge and Mian, Paula Gomes and Candida, Ana and Natali, Cruz},
	Doi = {10.1007/978-3-540-70621-2},
	Isbn = {9783540706199},
	Issn = {18650929},
	Journal = {System Engineering and Computer Science Department COPPE/UFRJ, Technical Report ES},
	Number = {May},
	Pages = {165--176},
	Title = {{Systematic Review in Software Engineering}},
	Volume = {679},
	Year = {2005}}

@article{Goncalves2014,
	Author = {Gon\c{c}alves, Marcelo Can\'{a}rio},
	Title = {{Um Processo de Infer\^{e}ncia de Desempenho para Apoiar o Planejamento da Capacidade de Aplica\c{c}\~{o}es na Nuvem Um Processo de Infer\^{e}ncia de Desempenho para Apoiar o Planejamento da Capacidade de Aplica\c{c}\~{o}es na Nuvem}},
	Year = {2014}}

@book{Feitelson2013,
	Author = {Feitelson, Dror G},
	File = {:Users/naubergois/Dropbox/wlmod.pdf:pdf},
	Publisher = {Cambridge University Press},
	Title = {{Workload Modeling for Computer Systems Performance Evaluation}},
	Year = {2013}}

@article{Malik2010b,
	Author = {Malik, Haroon},
	Doi = {10.1145/1810295.1810408},
	File = {:Users/naubergois/Downloads/icse2010\_malik.pdf:pdf},
	Institution = {Queen's University, Kingston, ON, Canada},
	Isbn = {978-1-60558-719-6},
	Issn = {0270-5257},
	Journal = {Software Engineering, 2010 ACM/IEEE 32nd \ldots},
	Keywords = {automation,counters,load test,performance counters,principal component analysis},
	Pages = {421--424},
	Publisher = {IEEE},
	Title = {{A methodology to support load test analysis}},
	Volume = {2},
	Year = {2010}}

@article{Kuhn1997,
	Abstract = {What makes a distributed system reliable? A study of failures in
the US public switched telephone network (PSTN) shows that human
intervention is one key to this large system's reliability. Software is
not the weak link in the PSTN system's dependability. Extensive use of
built-in self-test and recovery mechanisms in major system components
(switches) contributed to software dependability and are significant
design features in the PSTN. The network's high dependability indicates
that the trade-off between dependability gains and complexity introduced
by built-in self-test and recovery mechanisms can be positive. Likewise,
the tradeoff between complex interactions and the loose coupling of
system components has been positive, permitting quick human intervention
in most system failures and resulting in an extremely reliable system
},
	Author = {Kuhn, D. Richard},
	Doi = {10.1109/2.585151},
	File = {:Users/naubergois/Dropbox/kuhn-97-pstn-failures.pdf:pdf},
	Issn = {00189162},
	Journal = {Computer},
	Number = {4},
	Pages = {31--36},
	Pmid = {150},
	Title = {{Sources of failure in the public switched telephone network}},
	Volume = {30},
	Year = {1997}}

@article{McMinn2004,
	Author = {McMinn, Philip and Court, Regent and Testing, Software and Street, Portobello},
	Doi = {10.1002/stvr.294},
	File = {:Users/naubergois/Library/Application Support/Mendeley Desktop/Downloaded/McMinn - 2004 - Search-based software test data generation a survey.pdf:pdf},
	Isbn = {1099-1689},
	Issn = {09600833},
	Journal = {Software testing, Verification and reliability},
	Keywords = {Automated software test data generation,Evolutionary algorithms,Evolutionary testing,Metaheuristic search,Search-based software engineering,Simulated annealing,algorithms,automated software test,automated software test data generation,data generation,evolutionary,evolutionary algorithms,evolutionary testing,metaheuristic search,search-based software engineering,simulated annealing},
	Pages = {1--58},
	Title = {{Search-based software test data generation: a survey}},
	Volume = {14},
	Year = {2004}}

@article{DiLucca2006,
	Author = {{Di Lucca}, Giuseppe a. and Fasolino, Anna Rita},
	Doi = {10.1016/j.infsof.2006.06.006},
	Isbn = {0-7695-2413-3},
	Issn = {09505849},
	Journal = {Information and Software Technology},
	Keywords = {Software testing,Web application testing,Web engineering},
	Pages = {1172--1186},
	Title = {{Testing Web-based applications: The state of the art and future trends}},
	Volume = {48},
	Year = {2006}}
	
@article{Harman2015,
abstract = {Search Based Software Testing (SBST) formulates testing as an optimisation problem, which can be attacked using computational search techniques from the field of Search Based Software Engineering (SBSE). We present an analysis of the SBST research agenda1, focusing on the open problems and chal- lenges of testing non-functional properties, in particular a topic we call ‘Search Based Energy Testing' (SBET), Multi-objective SBST and SBST for Test Strategy Identification. We conclude with a vision of FIFIVERIFY tools, which would automatically find faults, fix them and verify the fixes. We explain why we think such FIFIVERIFY tools constitute an exciting challenge for the SBSE community that already could be within its reach.},
author = {Harman, Mark and Jia, Yue and Zhang, Yuanyuan},
isbn = {9781479971251},
journal = {8th IEEE International Conference on Software Testing, Verification and Validation (ICST)},
number = {Icst},
title = {{Achievements , open problems and challenges for search based software testing}},
url = {http://www0.cs.ucl.ac.uk/staff/mharman/icst15.pdf},
year = {2015}
}
	

@article{Anand2013,
	Author = {Anand, Saswat and Burke, Edmund K. and Chen, Tsong Yueh and Clark, John and Cohen, Myra B. and Grieskamp, Wolfgang and Harman, Mark and Harrold, Mary Jean and McMinn, Phil},
	Doi = {10.1016/j.jss.2013.02.061},
	Issn = {01641212},
	Journal = {Journal of Systems and Software},
	Keywords = {Adaptive random testing,Combinatorial testing,Model-based testing,Orchestrated survey,Search-based software testing,Software testing,Symbolic execution,Test automation,Test case generation},
	Pages = {1978--2001},
	Title = {{An orchestrated survey of methodologies for automated software test case generation}},
	Volume = {86},
	Year = {2013}}

@inproceedings{Penta2007,
	Author = {Penta, Massimiliano Di and Canfora, Gerardo and Esposito, Gianpiero},
	Booktitle = {Proceedings of the 9th annual conference on Genetic and evolutionary computation},
	Isbn = {9781595936974},
	Keywords = {quality of,search-based testing,service level agreement},
	Pages = {1090--1097},
	Title = {{Search-based testing of service level agreements}},
	Year = {2007}}

@article{Barber1999,
	Author = {Barber, Scott},
	File = {:Users/naubergois/Dropbox/ucml\_1.1.pdf:pdf},
	Pages = {1--9},
	Title = {{User Community Modeling Language ( UCML {\texttrademark} ) v1 . 1 for Performance Test Workloads UCML {\texttrademark} Overview}},
	Year = {1999}}

@article{Silveira2011,
	Author = {da Silveira, MB and Rodrigues, EM and Zorzo, AF},
	Journal = {SEKE},
	Keywords = {- model-based testing,performance testing,software product line},
	Title = {{Generation of Scripts for Performance Testing Based on UML Models.}},
	Year = {2011}}

@article{Grechanik2012,
	Author = {Grechanik, Mark and Fu, Chen and Xie, Qing},
	Doi = {10.1109/ICSE.2012.6227197},
	Isbn = {978-1-4673-1067-3},
	Journal = {2012 34th International Conference on Software Engineering (ICSE)},
	Month = jun,
	Pages = {156--166},
	Publisher = {Ieee},
	Title = {{Automatically finding performance problems with feedback-directed learning software testing}},
	Year = {2012}}

@article{Barna2011,
	Author = {Barna, Cornel and Litoiu, M and Ghanbari, H},
	Isbn = {9781450306072},
	Journal = {International conference on Autonomi},
	Keywords = {autonomic system,performance,performance testing},
	Pages = {91--100},
	Title = {{Autonomic load-testing framework}},
	Year = {2011}}

@book{Everett2007,
	Author = {Everett, Gerald D and Jr., Raymond McLeod},
	Isbn = {9780471793717},
	Title = {{Software Testing: Testing Across the Entire Software Development Life Cycle}},
	Year = {2007}}

@article{Chen,
	Author = {Chen, Feifei},
	File = {:Users/naubergois/Downloads/13113010195260.pdf:pdf},
	Journal = {chinacloud.cn},
	Keywords = {as it requires,cloud computing,cost,effectiveness before the deployment,energy,however,of cloud systems,performance engineering,this is not a,trade-off analysis,trivial task},
	Title = {{Generating a Performance Test-bed for Cloud Computing Systems}}}

@article{Afzal2009,
	Doi = {10.1016/j.infsof.2008.12.005},
	Isbn = {0950-5849},
	Issn = {09505849},
	Journal = {Information and Software Technology},
	Keywords = {Non-functional system properties,Search-based software testing,Systematic review},
	Number = {6},
	Pages = {957--976},
	Publisher = {Elsevier B.V.},
	Title = {{A systematic review of search-based testing for non-functional system properties}},
	Volume = {51},
	Year = {2009}}

@article{Mendoza2005a,
	Author = {Mendoza, Valerie and Novick, Dg},
	Doi = {10.1145/1085313.1085348},
	Isbn = {9157475725},
	Journal = {SIGDOC '05 Proceedings of the 23rd annual international conference on Design of communication: documenting \& designing for pervasive information},
	Keywords = {training,usability},
	Pages = {151--158},
	Title = {{Usability over time}},
	Year = {2005}}

@article{Glover1989,
	Abstract = {This is the second half of a two part series devoted to the tabu search metastrategy for optimization problems. Part I introduced the fundamental ideas of tabu search as an approach for guiding other heuristics to overcome the limitations of local optimality, both in a deterministic and a probabilistic framework. Part I also reported successful applications from a wide range of settings, in which tabu search frequently made it possible to obtain higher quality solutions than previously obtained with competing strategies, generally with less computational effort. Part II, in this issue, examines refinements and more advanced aspects of tabu search. Following a brief review of notation, Part II introduces new dynamic strategies for managing tabu lists, allowing fuller exploitation of underlying evaluation functions. In turn, the elements of staged search and structured move sets are characterized, which bear on the issue of finiteness. Three ways of applying tabu search to the solution of integer programming problems are then described, providing connections also to certain nonlinear programming applications. Finally, the paper concludes with a brief survey of new applications of tabu search that have occurred since the developments reported in Part I. Together with additional comparisons with other methods on a wide body of problems, these include results of parallel processing implementations and the use of tabu search in settings ranging from telecommunications to neural networks.},
	Author = {Glover, Fred},
	Doi = {10.1287/ijoc.2.1.4},
	Isbn = {079239965X},
	Issn = {0899-1499},
	Journal = {ORSA journal on Computing},
	Number = {3},
	Pages = {4--32},
	Pmid = {2758},
	Title = {{Tabu Search - Part II}},
	Volume = {2 1},
	Year = {1989}}

@article{Kirkpatrick2007,
	Author = {Kirkpatrick},
	Doi = {10.1126/science.220.4598.671},
	Issn = {0036-8075},
	Number = {4598},
	Pages = {671--680},
	Pmid = {17813860},
	Title = {{Optimization by SA}},
	Volume = {220},
	Year = {2007}}

@article{Goffe1994,
	Abstract = {Many statistical methods rely on numerical optimization to estimate a model's parameters. Unfortunately, conventional algorithms sometimes fail. Even when they do converge, there is no assurance that they have found the global, rather than a local, optimum. We test a new optimization algorithm, simulated annealing, on four econometric problems and compare it to three common conventional algorithms. Not only can simulated annealing find the global optimum, it is also less likely to fail on difficult functions because it is a very robust algorithm. The promise of simulated annealing is demonstrated on the four econometric problems.},
	Author = {Goffe, William L. and Ferrier, Gary D. and Rogers, John},
	Doi = {10.1016/0304-4076(94)90038-8},
	Isbn = {0304-4076},
	Issn = {03044076},
	Journal = {Journal of Econometrics},
	Keywords = {simulated},
	Number = {1-2},
	Pages = {65--99},
	Title = {{Global optimization of statistical functions with simulated annealing}},
	Volume = {60},
	Year = {1994}}

@phdthesis{tracey2000search,
	Author = {Tracey, Nigel James},
	School = {Citeseer},
	Title = {A search-based automated test-data generation framework for safety-critical software},
	Year = {2000}}

@article{alander1996ga,
	Author = {Alander, Jarmo T and Mantere, Pekka Turunen and Virolainen, Jari},
	Publisher = {Citeseer},
	Title = {GA in program testing},
	Year = {1996}}

@article{Tracey1998,
	Abstract = {One of the major costs in a software project is the construction of test-data. This paper outlines a generalised test-case data generation framework based on optimisation techniques. The framework can incorporate a number of testing criteria, for both functional and non-functional properties. Application of the optimisation framework to testing specification failures and exception conditions is illustrated. The results of a number of small case studies are presented and show the efficiency and effectiveness of this dynamic optimisation-based approach to generating test-data},
	Author = {Tracey, N J and Clark, J a and Mander, K C},
	Keywords = {QA 76 Software, computer programming,},
	Title = {{Automated Programme Flaw Finding using Simulated Annealing}},
	Year = {1998}}

@article{Wegener1999,
	Abstract = {For real-time systems, correct system functionality depends on
logical as well as on temporal correctness. Static analysis alone is not
sufficient to verify the temporal behavior of real-time systems. Since
existing test methods are not specialized for the verification of
temporal correctness, we have developed a new testing method, namely
evolutionary testing. This paper illustrates results of the first
industrial application of the evolutionary test},
	Author = {Wegener, J. and Sthamer, H. and Pohlheim, H.},
	Doi = {10.1109/REAL.1999.818852},
	Isbn = {0-7695-0475-2},
	Issn = {1052-8725},
	Journal = {Proceedings 20th IEEE Real-Time Systems Symposium (Cat. No.99CB37054)},
	Title = {{Testing the temporal behavior of real-time tasks using extended evolutionary algorithms}},
	Year = {1999}}

@article{Mueller1998,
	Abstract = {The paper contrasts two methods to verify timing constraints of
real-time applications. The method of static analysis predicts the
worst-case and best-case execution times of a task's code by analyzing
execution paths and simulating processor characteristics without ever
executing the program or requiring the program's input. Evolutionary
testing is an iterative testing procedure, which approximates the
extreme execution times within several generations. By executing the
test object dynamically and measuring the execution times the inputs are
guided yielding gradually tighter predictions of the extreme execution
times. The authors examined both approaches on a number of real world
examples. The results show that static analysis and evolutionary testing
are complementary methods, which together provide upper and lower bounds
for both worst-case and best-case execution times},
	Author = {Mueller, F. and Wegener, J.},
	Doi = {10.1109/RTTAS.1998.683198},
	File = {:Users/naubergois/Dropbox/rtas98.pdf:pdf},
	Isbn = {0-8186-8569-7},
	Journal = {Proceedings. Fourth IEEE Real-Time Technology and Applications Symposium (Cat. No.98TB100245)},
	Title = {{A comparison of static analysis and evolutionary testing for the verification of timing constraints}},
	Year = {1998}}

@article{Puschner1998,
	Abstract = {Analytically derived worst case execution time (WCET) bounds are
prone to errors, because they often rely on information provided by the
user. The paper presents a method for testing the results of static WCET
analysis. The proposed test method is a blackbox test method that uses a
genetic algorithm (GA) for test case generation. Important properties of
the method are: (a) that it requires minimal information about possible
impact data from the user and (b) that the GA guides data generation
into directions that have a good chance to yield the real WCET of the
program under test. Experimental results show that GA based testing
produces results of high quality},
	Author = {Puschner, P. and Nossal, R.},
	Doi = {10.1109/REAL.1998.739738},
	Isbn = {0-8186-9212-X},
	Issn = {1052-8725},
	Journal = {Proceedings 19th IEEE Real-Time Systems Symposium (Cat. No.98CB36279)},
	Title = {{Testing the results of static worst-case execution-time analysis}},
	Year = {1998}}

@article{J.WegenerK.GrimmM.GrochtmannH.Sthamer1996,
	Author = {{J. Wegener, K. Grimm, M. Grochtmann, H. Sthamer}, B. Jones},
	File = {:Users/naubergois/Dropbox/eurostar1996.pdf:pdf},
	Journal = {EuroSTAR'96: Proceedings of the Fourth International Conference on Software Testing Analysis and Review},
	Title = {{Systematic testing of real-time systems}},
	Year = {1996}}

@article{Gro,
	Author = {Gro, Hans-Gerhard},
	Publisher = {Citeseer},
	Title = {A prediction system for dynamic optimisation-based execution time analysis},
	Year = {2001}}

@misc{Gross2003,
	Author = {Gross, Hg},
	Booktitle = {Proceedings of the International Conference on Information Technology: Prospects and Challenges in the 21st Century},
	File = {:Users/naubergois/Dropbox/grossITPC03\_RealTime.pdf:pdf},
	Title = {{An evaluation of dynamic, optimisation-based worst-case execution time analysis}},
	Year = {2003}}

@article{Briand2005,
	Author = {Briand, Lionel C. and Labiche, Yvan and Shousha, Marwa},
	Doi = {10.1145/1068009.1068183},
	Isbn = {1595930108},
	Journal = {Proceedings of the 2005 conference on Genetic and evolutionary computation - GECCO '05},
	Keywords = {genetic algorithms,schedulability theory},
	Pages = {1021},
	Title = {{Stress testing real-time systems with genetic algorithms}},
	Year = {2005}}

@article{Canfora,
	Author = {Canfora, Gerardo and Penta, Massimiliano Di and Esposito, Raffaele and Villani, Maria Luisa},
	Isbn = {1595930108},
	Keywords = {aware composi-,oriented software engineering,qos,service},
	Title = {{2005., Canfora, G., An approach for QoS-aware service composition based on genetic algorithms}}}

@article{gross2000structural,
	Author = {Gross, H-G and Jones, Bryan F and Eyres, David E},
	Journal = {IEE Proceedings-Software},
	Number = {2},
	Pages = {25--30},
	Publisher = {IET},
	Title = {Structural performance measure of evolutionary testing applied to worst-case timing of real-time systems},
	Volume = {147},
	Year = {2000}}

@article{goldberg1989messy,
	Author = {Goldberg, David E and Korb, Bradley and Deb, Kalyanmoy},
	Journal = {Complex systems},
	Number = {5},
	Pages = {493--530},
	Publisher = {Complex Systems Publications, Champaign, IL, USA},
	Title = {Messy genetic algorithms: Motivation, analysis, and first results},
	Volume = {3},
	Year = {1989}}

@article{wegener1998verifying,
	Author = {Wegener, Joachim and Grochtmann, Matthias},
	Journal = {Real-Time Systems},
	Number = {3},
	Pages = {275--298},
	Publisher = {Springer},
	Title = {Verifying timing constraints of real-time systems by means of evolutionary testing},
	Volume = {15},
	Year = {1998}}

@article{alander1998searching,
	Author = {Alander, Jarmo T and Mantere, Timo and Moghadampour, Ghodrat and Matila, Jukka},
	Journal = {Electric Power Systems Research},
	Number = {3},
	Pages = {229--233},
	Publisher = {Elsevier},
	Title = {Searching protection relay response time extremes using genetic algorithm---software quality by optimization},
	Volume = {46},
	Year = {1998}}

@article{Wegener1998,
	Abstract = {Many industrial products are based on the use of embedded computer systems. Usually, these systems have to fulfil real-time requirements, and correct system functionality depends on their logical correctness as well as on their temporal correctness. in order to verify the temporal behavior of real-time systems, previous scientific work has, to a large extent, concentrated on static analysis techniques. Although these techniques offer the possibility of providing safe estimates of temporal behavior for certain cases, there are a number of cases in practice for which static analysis can not be easily applied. Furthermore, no commercial tools for timing analysis of real-world programs are available. Therefore, the developed systems have to be thoroughly tested in order to detect existing deficiencies in temporal behavior, as well as to strengthen the confidence in temporal correctness. An investigation of existing test methods shows that they mostly concentrate on testing for logical correctness. They are nor specialised in the examination of temporal correctness which is also essential to real-rime systems. For this reason, existing test procedures must be supplemented by new methods which concentrate on determining whether the system violates its specified timing constraints. Normally, a violation means that outputs are produced too early, or their computation takes too long. The task of the tester therefore is to find the input situations with the longest or shortest execution limes, in order to check whether they produce a temporal error. If the starch for such inputs is interpreted as a problem of optimization, evolutionary computation can be used to automatically find the inputs with the longest or shortest execution rimes. This automatic search for accurate test data by means of evolutionary computation is called evolutionary testing. Experiments using evolutionary testing on a number of programs with up to 1511 LOC and 5000 input parameters have successfully identified new longer and shorter execution times than had been found using other testing techniques. Evolutionary testing, therefore, seems to be a promising approach for the verification of timing constraints. A combination of evolutionary testing and systematic testing offers further opportunities to improve the test quality, and could lead to an effective test strategy for real-time systems.},
	Author = {Wegener, J and Grochtmann, M},
	Doi = {Doi 10.1023/A:1008096431840},
	Isbn = {0922-6443},
	Issn = {0922-6443},
	Journal = {Real-Time Systems},
	Keywords = {evolutionary algorithm,evolutionary optimization,evolutionary testing,genetic algorithms,real-time systems,temporal behavior,temporal correctness,test strategy,testing,validation,verification},
	Number = {3},
	Pages = {275--298},
	Title = {{Verifying timing constraints of real-time systems by means of evolutionary testing}},
	Volume = {15},
	Year = {1998}}

@book{Halili2008,
	Abstract = {"This book introduces you to JMeter (version 2.3) and test automation, providing a step-by-step guide to testing with JMeter. You will learn how to measure the performance of a website using JMeter. While it discusses test automation generally, the bulk of this book gives specific, vivid, and easy-to-understand walkthroughs of JMeter's testing tools showing what they can do, and when and how to use them. Learn to load-test your website, test its functional behaviour, and measure its performance by implementing the features of Jmeter"--Resource description p.},
	Author = {Halili, Emily H},
	Isbn = {9786611737528 6611737529 9781847192967 1847192963 1847192955 9781847192950},
	Title = {{Apache JMeter a practical beginner's guide to automated testing and performance measurement for your websites}},
	Year = {2008}}

@article{wegener1997testing,
	Author = {Wegener, Joachim and Sthamer, Harmen and Jones, Bryan F and Eyres, David E},
	Journal = {Software Quality Journal},
	Number = {2},
	Pages = {127--135},
	Publisher = {Springer},
	Title = {Testing real-time systems using genetic algorithms},
	Volume = {6},
	Year = {1997}}
	
	@book{Lewis2005,
abstract = {It is often assumed that software testing is based on clearly defined requirements and software development standards. However, testing is typically performed against changing, and sometimes inaccurate, requirements. The third edition of a bestseller, Software Testing and Continuous Quality Improvement, Third Edition provides a continuous quality framework for the software testing process within traditionally structured and unstructured environments. This framework aids in creating meaningful test cases for systems with evolving requirements. This completely revised reference provides a comprehensive look at software testing as part of the project management process, emphasizing testing and quality goals early on in development. Building on the success of previous editions, the text explains testing in a Service Orientated Architecture (SOA) environment, the building blocks of a Testing Center of Excellence (COE), and how to test in an agile development. Fully updated, the sections on test effort estimation provide greater emphasis on testing metrics. The book also examines all aspects of functional testing and looks at the relation between changing business strategies and changes to applications in development. Includes New Chapters on Process, Application, and Organizational Metrics All IT organizations face software testing issues, but most are unprepared to manage them. Software Testing and Continuous Quality Improvement, Third Editionis enhanced with an up-to-date listing of free software tools and a question-and-answer checklist for choosing the best tools for your organization. It equips you with everything you need to effectively address testing issues in the most beneficial way for your business.},
author = {Lewis, William E. and Dobbs, David and Veerapillai, Gunasekaran},
file = {:Users/naubergois/Downloads/2005 Software.Testing.and.Continuous.Quality.Improvement.2nd.Ed{\_}bagus.pdf:pdf},
isbn = {1420080733},
pages = {688},
title = {{Software testing and continuous quality improvement}},
url = {http://books.google.com/books?id=fgaBDd0TfT8C{\&}pgis=1},
year = {2005}
}

